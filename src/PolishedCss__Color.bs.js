// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Css_AtomicTypes = require("bs-css/src/Css_AtomicTypes.bs.js");
var Polished__Color = require("./Polished__Color.bs.js");

function rgbaRegexGroups(param, i) {
  return [
            1,
            2,
            3,
            4
          ].includes(i);
}

function rgbValue(v) {
  return Caml_format.caml_int_of_string((v == null) ? undefined : Caml_option.some(v));
}

function alphaValue(v) {
  return Caml_format.caml_float_of_string((v == null) ? undefined : Caml_option.some(v));
}

function toRgba(string) {
  var values = Caml_option.null_to_opt(new RegExp("rgba\\(\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))\\s*,\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))\\s*,\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))\\s*,\\s*(-?\\d+|-?\\d*.\\d+)\\s*\\)").exec(string)).filter(rgbaRegexGroups);
  var red = Caml_format.caml_int_of_string(Caml_option.nullable_to_opt(Caml_array.get(values, 0)));
  var green = Caml_format.caml_int_of_string(Caml_option.nullable_to_opt(Caml_array.get(values, 1)));
  var blue = Caml_format.caml_int_of_string(Caml_option.nullable_to_opt(Caml_array.get(values, 2)));
  var alpha = Caml_format.caml_float_of_string(Caml_option.nullable_to_opt(Caml_array.get(values, 3)));
  return Css_AtomicTypes.Color.rgba(red, green, blue, {
              NAME: "num",
              VAL: alpha
            });
}

function transparentize(color, amount) {
  return toRgba(Polished__Color.transparentize(color, amount));
}

exports.rgbaRegexGroups = rgbaRegexGroups;
exports.rgbValue = rgbValue;
exports.alphaValue = alphaValue;
exports.toRgba = toRgba;
exports.transparentize = transparentize;
/* Polished__Color Not a pure module */
