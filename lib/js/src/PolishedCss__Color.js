// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Css_AtomicTypes = require("bs-css/lib/js/src/Css_AtomicTypes.js");
var Polished__Color = require("./Polished__Color.js");

var regex = "rgba\\(\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))\\s*,\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))\\s*,\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))\\s*,\\s*(-?\\d+|-?\\d*.\\d+)\\s*\\)";

function rgbaRegexGroups(param, i) {
  return [
            1,
            2,
            3,
            4
          ].includes(i);
}

function rgbValue(v) {
  return Caml_format.caml_int_of_string(Belt_Option.getExn((v == null) ? undefined : Caml_option.some(v)));
}

function alphaValue(v) {
  return Caml_format.caml_float_of_string((v == null) ? undefined : Caml_option.some(v));
}

function fromString(string) {
  var result = new RegExp(regex).exec(string);
  if (result === null) {
    return ;
  }
  var values = result.filter(rgbaRegexGroups);
  var red = Caml_format.caml_int_of_string(Belt_Option.getExn(Caml_option.nullable_to_opt(Caml_array.get(values, 0))));
  var green = Caml_format.caml_int_of_string(Belt_Option.getExn(Caml_option.nullable_to_opt(Caml_array.get(values, 1))));
  var blue = Caml_format.caml_int_of_string(Belt_Option.getExn(Caml_option.nullable_to_opt(Caml_array.get(values, 2))));
  var alpha = Caml_format.caml_float_of_string(Caml_option.nullable_to_opt(Caml_array.get(values, 3)));
  return Css_AtomicTypes.Color.rgba(red, green, blue, {
              NAME: "num",
              VAL: alpha
            });
}

var Rgba = {
  regex: regex,
  rgbaRegexGroups: rgbaRegexGroups,
  rgbValue: rgbValue,
  alphaValue: alphaValue,
  fromString: fromString
};

function fromString$1(string) {
  return {
          NAME: "hex",
          VAL: string.slice(1, string.length)
        };
}

var Hex = {
  fromString: fromString$1
};

var toString = Css_AtomicTypes.Color.toString;

function fromString$2(string) {
  var match = string.slice(0, 4);
  if (match === "rgba") {
    return Belt_Option.getExn(fromString(string));
  } else {
    return fromString$1(string);
  }
}

var Utils = {
  Rgba: Rgba,
  Hex: Hex,
  toString: toString,
  fromString: fromString$2
};

function shade(color, amount) {
  return fromString$2(Polished__Color.shade(Curry._1(toString, color), amount));
}

function tint(color, amount) {
  return fromString$2(Polished__Color.tint(Curry._1(toString, color), amount));
}

function lighten(color, amount) {
  return fromString$2(Polished__Color.lighten(Curry._1(toString, color), amount));
}

function darken(color, amount) {
  return fromString$2(Polished__Color.darken(Curry._1(toString, color), amount));
}

function transparentize(color, amount) {
  return fromString(Polished__Color.transparentize(Curry._1(toString, color), amount));
}

function getContrast(c1, c2) {
  return Polished__Color.getContrast(Curry._1(toString, c1), Curry._1(toString, c2));
}

function getLuminance(color) {
  return Polished__Color.getLuminance(Curry._1(toString, color));
}

function grayscale(color) {
  return fromString$2(Polished__Color.grayscale(Curry._1(toString, color)));
}

function desaturate(color, amount) {
  return fromString$2(Polished__Color.desaturate(Curry._1(toString, color), amount));
}

function complement(color) {
  return fromString$2(Polished__Color.complement(Curry._1(toString, color)));
}

function adjustHue(color, degree) {
  return fromString$2(Polished__Color.adjustHue(Curry._1(toString, color), degree));
}

exports.Utils = Utils;
exports.shade = shade;
exports.tint = tint;
exports.lighten = lighten;
exports.darken = darken;
exports.transparentize = transparentize;
exports.getContrast = getContrast;
exports.getLuminance = getLuminance;
exports.grayscale = grayscale;
exports.desaturate = desaturate;
exports.complement = complement;
exports.adjustHue = adjustHue;
/* Polished__Color Not a pure module */
